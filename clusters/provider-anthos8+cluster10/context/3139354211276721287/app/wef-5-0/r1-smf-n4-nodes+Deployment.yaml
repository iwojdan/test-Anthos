{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"labels":{"app.kubernetes.io/instance":"r1","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"r1-smf-n4-nodes","app.kubernetes.io/version":"0.2.2","emco/deployment-id":"3139354211276721287-wef-5-0","helm.sh/chart":"smf-n4-5g-0.9.0","nf":"smf-n4-nodes","product":"wef"},"name":"r1-smf-n4-nodes","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"r1","app.kubernetes.io/name":"r1-smf-n4-nodes","nf":"smf-n4-nodes"}},"template":{"metadata":{"labels":{"app.kubernetes.io/instance":"r1","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"r1-smf-n4-nodes","app.kubernetes.io/version":"0.2.2","emco/deployment-id":"3139354211276721287-wef-5-0","helm.sh/chart":"smf-n4-5g-0.9.0","nf":"smf-n4-nodes","product":"wef"}},"spec":{"containers":[{"args":["-c","/conf/n4NodesCfg.yaml"],"image":"xg-core-delivery-docker-local.artifact.b-com.com/n4-nodes:0.2.2","imagePullPolicy":"IfNotPresent","name":"r1-smf-n4-nodes","ports":[{"containerPort":8805,"name":"pfcp","protocol":"UDP"}],"resources":null,"tty":true,"volumeMounts":[{"mountPath":"/conf","name":"n4-nodes-configuration"}]}],"imagePullSecrets":[{"name":"registrypullsecret"}],"initContainers":[{"command":["/bin/sh","-c","helpFunction()\n{\n  echo \"\"\n  echo \"Usage: $0 -c config.yaml\"\n  echo -e \"\\t-c path of config file\"\n  exit 1 # Exit script after printing help\n}\n\ngetConfigFile() {\n    while getopts \"c:\" opt\n    do\n        case \"$opt\" in\n            c ) parameterC=\"$OPTARG\" ;;\n            ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent\n        esac\n    done\n\n    # Print helpFunction in case parameters are empty\n    if [ -z \"$parameterC\" ]\n    then\n        echo \"path of config file empty or incorrect\";\n        helpFunction\n    fi\n}\n\nwaitN4Session() {\n  # set -x\n  while [ $(curl --connect-timeout 5 -H \"authorization: Basic YWRtaW46YWRtaW4=\" -H \"content-type: application/json\" \\\n            -s -o /dev/null -w \"%{http_code}\" \\\n            'http://r1-smf-n4-sessions:8080/nsmf-n4/v1/topology') -ne 200 ] \n  do \n    echo waiting for deployment r1-smf-n4-sessions\n    sleep 5 \n  done\n}\n\nmain() {\n    body=$(yq r -j \"$parameterC\")\n    printf \"send topology\\n\"\n    if [ $(curl --location --request POST 'http://r1-smf-n4-sessions:8080/nsmf-n4/v1/topology' \\\n                    --header 'Content-Type: application/json' \\\n                    --data-raw $body \\\n                    -s -o /dev/null -w \"%{http_code}\") -eq 200 ];\n    then\n      echo \"Topology pushed successfully !\"\n    else\n      echo \"Topology pushed failed, exit now !\"\n      exit\n    fi\n    printf \"\\nget topology\\n\"\n    curl --location --request GET 'http://r1-smf-n4-sessions:8080/nsmf-n4/v1/topology' | yq r -P '-'\n}\n\n# Begin script in case all parameters are correct\n# set -x\nyq --version\nwaitN4Session\ngetConfigFile -c /conf/topology.yaml\nmain\n"],"image":"xg-core-delivery-docker-local.artifact.b-com.com/public/unaittxu/yq-curl:3.4.1","name":"init-topology","resources":null,"tty":true,"volumeMounts":[{"mountPath":"/conf","name":"n4-nodes-topology"}]}],"volumes":[{"configMap":{"defaultMode":420,"name":"r1-smf-n4-nodes-cfgmap"},"name":"n4-nodes-configuration"},{"configMap":{"defaultMode":420,"name":"r1-smf-n4-topology-cfgmap"},"name":"n4-nodes-topology"}]}}}}
